# options(java.parameters = "- Xmx6g")
# # library(rrdf)
# # options(java.parameters = "- Xmx6g")

# rrdf apparently not necessary,
# and depends on rJava anyway,
# which is working from the R command line interpreter
# but not in RStudio on Mark's new MacBook

###   ###   ###

# no longer necessary? see also rrdf
# library(jsonlite)
# library(stringr)

###   ###   ###

# could have used veriuos JSON parsers: jsonlite? rjsonio? rjson?
# they have slight differences in the data structures returned by fromJson
# therefore need to match with monitoring/expectation code

# running SPARQL against a password protected graphdb repo takes some extra work
# this script includes an example of pure SPARQL::SPARQL update with authentication

# what's an example of of another script that do uses yaml and a named graph monitoring function?
#   tweencorn on http://pennturbo.org:8787/?
# see also
#   https://github.com/PennTURBO/disease_to_diagnosis_code/blob/master/populate_disease_to_diagnosis_code_repo.R
#     6672527 on Jun 20, 2019
#   https://github.com/pennbiobank/turbo/blob/master/doodads/directEvidenceFor_transIcd.R
#     5440382 on Aug 12, 2019

###   ###   ###

# BELOW REPALCED BY A DIRECT MAPPING... SEE ICD9CM_SNOMED_MAP-to-RDF.R
# (PREVIOUSLY, ontorefine instantation of...)
#   https://download.nlm.nih.gov/umls/kss/mappings/ICD9CM_TO_SNOMEDCT/ICD9CM_TO_SNOMEDCT_DIAGNOSIS_201812.zip
#   from server graphdb-import folder
#   previous dd scripts required loading the ICD9CM_TO_SNOMEDCT_DIAGNOSIS_201812 CSV files into OntoRefine projects
#   and instantiated them on the fly

# the following SAPRQL could be used
# for an ontorefie instantiation of the two CSV files
# from https://download.nlm.nih.gov/umls/kss/mappings/ICD9CM_TO_SNOMEDCT/ICD9CM_TO_SNOMEDCT_DIAGNOSIS_201812.zip
# do each CSV file in a seperate otorefien project

# PREFIX mydata: <http://example.com/resource/>
#   PREFIX spif: <http://spinrdf.org/spif#>
# insert {
#   graph <https://www.nlm.nih.gov/research/umls/mapping_projects/icd9cm_to_snomedct.html> {
#     ?myRowId a <https://www.nlm.nih.gov/research/umls/mapping_projects/icd9cm_to_snomedct.html> ;
#     mydata:File ?File ;
#     mydata:ICD_CODE ?ICD_CODE ;
#     mydata:ICD_NAME ?ICD_NAME ;
#     mydata:IS_CURRENT_ICD ?IS_CURRENT_ICD ;
#     mydata:IP_USAGE ?IP_USAGE ;
#     mydata:OP_USAGE ?OP_USAGE ;
#     mydata:AVG_USAGE ?AVG_USAGE ;
#     mydata:IS_NEC ?IS_NEC ;
#     mydata:SNOMED_CID ?SNOMED_CID ;
#     mydata:SNOMED_FSN ?SNOMED_FSN ;
#     mydata:IS_1-1MAP ?IS_1_1MAP ;
#     mydata:CORE_USAGE ?CORE_USAGE ;
#     mydata:IN_CORE ?IN_CORE .
#   }
# } WHERE {
#   SERVICE <SOME ONTOREFINE PROJECT CODE> {
#   ?row a mydata:Row ;
#   mydata:File ?File ;
#   mydata:ICD_CODE ?ICD_CODE .
#   optional {
#     ?row mydata:ICD_NAME ?ICD_NAME ;
#   }
#   optional {
#     ?row mydata:IS_CURRENT_ICD ?IS_CURRENT_ICD ;
#   }
#   optional {
#     ?row  mydata:IP_USAGE ?IP_USAGE ;
#   }
#   optional {
#     ?row  mydata:OP_USAGE ?OP_USAGE ;
#   }
#   optional {
#     ?row  mydata:AVG_USAGE ?AVG_USAGE ;
#   }
#   optional {
#     ?row  mydata:IS_NEC ?IS_NEC ;
#   }
#   optional {
#     ?row  mydata:SNOMED_CID ?SNOMED_CID ;
#   }
#   optional {
#     ?row  mydata:SNOMED_FSN ?SNOMED_FSN ;
#   }
#   optional {
#     ?row  mydata:IS_1-1MAP ?IS_1_1MAP ;
#   }
#   optional {
#     ?row  mydata:CORE_USAGE ?CORE_USAGE ;
#   }
#   optional {
#     ?row  mydata:IN_CORE ?IN_CORE .
#   }
#   BIND(uuid() AS ?myRowId)
# }
# }'

### representative new repo configuration

#' # RDF4J configuration template for the GraphDB Free repository
#' @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
#' @prefix rep: <http://www.openrdf.org/config/repository#>.
#' @prefix sr: <http://www.openrdf.org/config/repository/sail#>.
#' @prefix sail: <http://www.openrdf.org/config/sail#>.
#' @prefix owlim: <http://www.ontotext.com/trree/owlim#>.
#'
#' [] a rep:Repository ;
#' rep:repositoryID "disease_diagnosis_dev" ;
#' rdfs:label "" ;
#' rep:repositoryImpl [
#'   rep:repositoryType "graphdb:FreeSailRepository" ;
#'   sr:sailImpl [
#'     sail:sailType "graphdb:FreeSail" ;
#'
#'     owlim:base-URL "http://example.org/owlim#" ;
#'     owlim:defaultNS "" ;
#'     owlim:entity-index-size "10000000" ;
#'     owlim:entity-id-size  "32" ;
#'     owlim:imports "" ;
#'     owlim:repository-type "file-repository" ;
#'     owlim:ruleset "empty" ;
#'     owlim:storage-folder "storage" ;
#'
#'     owlim:enable-context-index "true" ;
#'
#'     owlim:enablePredicateList "true" ;
#'
#'     owlim:in-memory-literal-properties "true" ;
#'     owlim:enable-literal-index "true" ;
#'
#'     owlim:check-for-inconsistencies "false" ;
#'     owlim:disable-sameAs  "true" ;
#'     owlim:query-timeout  "0" ;
#'     owlim:query-limit-results  "0" ;
#'     owlim:throw-QueryEvaluationException-on-timeout "false" ;
#'     owlim:read-only "false" ;
#'     ]
#'   ].

###

### semantic types
# I used to include these in each bioportal export
#   and in a separate file
# now I'm doing separate file only
# no ontology name is asserted in the file
# graph/context name?
# https://bioportal.bioontology.org/ontologies/STY ?
# http://purl.bioontology.org/ontology/STY/ ?
# https://www.nlm.nih.gov/research/umls/META3_current_semantic_types.html ?



###   ###   ###

### ARE ANY OF THESE NOTES, UP TO "update.list <- list()" STILL RELEVANT?

# currently trying direct links only, EXCEPT transitive over snomed
# then expand over ICD subclasses to be uniform with snomed transitivity
# then OPTIONALLY expand over MonDO subclasses, with axiom filter? in real time?

# should mondo "originals" be expanded to also include ?s owl:equivalentClass ?restriction (blank node)?
# should evidence be materialized directly only, and only dynamically over mondo subclasses?
#   would enable better axiomatic filtering

# select distinct ?g ?p
# where {
#   ?s  <http://example.com/resource/definedIn> <http://purl.obolibrary.org/obo/mondo.owl> .
#   graph ?g {
#     ?s ?p ?o .
#   }
#   filter (isblank(?o))
# }
#
# g	p
# mydata:filteredMondoTransitiveSubClasses 	rdfs:subClassOf
# obo:mondo.owl 	rdfs:subClassOf
# obo:mondo.owl 	owl:equivalentClass
# obo:mondo.owl 	owl:intersectionOf
# obo:mondo.owl 	owl:unionOf


# phase 1, organized topically not sequentially
# "materialize UMLS CUIs"
# "defined in"

# rewrites: "rewrite ?p mondo", "mondo ?p rewrite", "mondo dbxr literal"

# isolate (move to another graph) and delete from original graph:
#  "undefined mondo ?p rewrites", "undefined rewrite ?p mondo",
#  "?mondo ?p icd9 ranges", "?icd9 ranges ?p mondo"
#  "ICD10 siblings", "ICD9 siblings"

# *** "isolate mondo original statements"
# where {
#   graph <http://purl.obolibrary.org/obo/mondo.owl> {
#     values ?p {
#       skos:exactMatch
#       skos:closeMatch
#       # skos:narrowMatch
#       owl:equivalentClass
#     }
#     ?s ?p ?o
#     filter(isuri(?o))
#   }
# }
# "someMaterializedMondoAxioms"
# turned filter off!
# "filteredMondoTransitiveSubClasses"

# "NLM ICD9CM to SNOMED mapping... tag booleans"
# "ints to to bool", "delete ints", "migrate bools", "clear temp"

# "materialize ICD9CM to snomed mappings"

# "ICD9DiseaseInjuryTransitiveSubClasses"
# "ICD10TransitiveSubClasses"
# "SnomedDiseaseTransitiveSubClasses"

###   ###   ###
